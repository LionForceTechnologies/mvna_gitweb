{"version":3,"sources":["routes/usercreation/index.js"],"names":["Usercreation","props","memberid","useSelector","crud","ucreationid","ifdeleted","deleteducreation","roles","getrole","ucreation","useState","role","setrole","pass","setpass","name","setname","contact","setcontact","email","setemail","edit","setedit","stop","setstop","custom","setcustom","deleteid","setdeleteid","red_data","dispatch","useDispatch","Form","useForm","form","deletesuccess","setdeletesuccess","deletes","setdeletes","Option","Select","Edit","e","editucreation","target","getAttribute","Delete","useEffect","getucreation","cleardeleteucreation","setFieldsValue","data","uname","mobile_number","role_id","length","map","item","i","action","style","display","marginRight","height","onClick","data-id","id","className","index","key","role_data","value","initialValues","remember","onFinish","values","putucreation","password","updateucreation","resetFields","onFinishFailed","errorInfo","console","log","xl","lg","md","sm","xs","Item","rules","required","message","onChange","placeholder","newCurrency","Password","autocomplete","onKeyUp","replace","type","htmlType","title","columns","dataIndex","dataSource","show","showCancel","confirmBtnText","cancelBtnText","confirmBtnBsStyle","cancelBtnBsStyle","onConfirm","deleteucreation","status","onCancel","success"],"mappings":"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","file":"static/js/14.1b249f9f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Divider, Table, Col, Row, Button, Checkbox, Form, Input, Select } from \"antd\";\r\nimport axios from 'axios';\r\nimport { putucreation, updateucreation, getucreation, editucreation, deleteucreation, cleardeleteucreation,getrole } from \"../../appRedux/actions/Crud\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nconst Usercreation = (props) => {\r\n    const memberid = useSelector(({ crud }) => crud.ucreationid);\r\n    const ifdeleted = useSelector(({ crud }) => crud.deleteducreation);\r\n    const roles = useSelector(({ crud }) => crud.getrole);\r\n    const ucreation = useSelector(({ crud }) => crud.ucreation);\r\n    const [role, setrole] = useState('');\r\n    const [pass, setpass] = useState('');\r\n    const [name, setname] = useState('');\r\n    const [contact, setcontact] = useState('');\r\n    const [email, setemail] = useState('');\r\n    const [edit, setedit] = useState('');\r\n    const [stop, setstop] = useState(0);\r\n    const [custom, setcustom] = useState(false);\r\n    const [deleteid, setdeleteid] = useState(false);\r\n    const red_data = useSelector(({ crud }) => crud.getrole);\r\n    const dispatch = useDispatch();\r\n    const [form] = Form.useForm();\r\n    const [deletesuccess, setdeletesuccess] = useState(false);\r\n    const [deletes, setdeletes] = useState(0);\r\n    const [datas, setdatas] = useState([]);\r\n    const [edits, setedits] = useState('');\r\n    const [forhk, setforhk] = useState(0);\r\n    const { Option } = Select;\r\n    useEffect(() => {\r\n        if (stop === 0) {\r\n            dispatch(getrole())\r\n            dispatch(getucreation())\r\n        }\r\n        setstop(1)\r\n    })\r\n    useEffect(()=>{\r\n        if(ifdeleted == 'success' ){\r\n          if(deletes != 0){\r\n            setdeletesuccess(true)\r\n            dispatch(cleardeleteucreation(''))\r\n            setdeletes(1)\r\n          }\r\n        }\r\n      })\r\n    useEffect(()=>{\r\n        if(memberid !== ''){\r\n          if(edit !== 0){\r\n            form.setFieldsValue({\r\n              role: memberid.data[0].role,\r\n              uname: memberid.data[0].name,\r\n              contact: memberid.data[0].mobile_number,\r\n              email : memberid.data[0].email,\r\n            })\r\n            setname(memberid.data[0].name)    \r\n            setrole(memberid.data[0].role_id)\r\n            setcontact(memberid.data[0].mobile_number)\r\n            setemail(memberid.data[0].email)\r\n            setedit(0)\r\n          }\r\n        }\r\n      })\r\n    function Edit(e) {\r\n        dispatch(editucreation(e.target.getAttribute('data-id')))\r\n        setedit(1)\r\n    }\r\n    function Delete(e) {\r\n        setdeleteid(e.target.getAttribute('data-id'))\r\n        setcustom(true)\r\n    }\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    const onFinish = values => {\r\n        if (memberid == '') {\r\n            dispatch(putucreation(\r\n                {\r\n                    name: name,\r\n                    email: email,\r\n                    mobile_number: contact,\r\n                    password: pass,\r\n                    role_id: role,\r\n                    // 'icon' : imge\r\n                }\r\n            ))\r\n        }\r\n        else if (memberid != '') {\r\n            dispatch(updateucreation(\r\n                {\r\n                    name: name,\r\n                    email: email,\r\n                    mobile_number: contact,\r\n                    password: pass,\r\n                    role_id: role,\r\n                    'id': memberid.data[0].id\r\n                }\r\n            ))\r\n            setedit(0);\r\n            dispatch(cleardeleteucreation(''))\r\n\r\n        }\r\n\r\n\r\n\r\n        form.resetFields();\r\n\r\n    };\r\n    // if(datas.length > 1){\r\n    //     alert(datas[0].name)\r\n    // }\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n        },\r\n        {\r\n            title: 'Role',\r\n            dataIndex: 'role',\r\n            key: 'role',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            key: 'action',\r\n        }\r\n    ];\r\n    let data = [];\r\n\r\n    if (ucreation.length > 0) {\r\n        data = ucreation.map((item, i) => {\r\n            return {\r\n                email: item.email,\r\n                name: item.name,\r\n                role: item.role,\r\n                action: (<><div style={{ display: 'flex' }}><i style={{ marginRight: '7px', height: '15px' }} onClick={Edit} data-id={item.id} className=\"icon icon-edit\" /><i data-id={item.id} onClick={Delete} style={{ height: '15px' }} className=\"icon icon-trash\" /></div></>),\r\n                index: item.id,\r\n                key: item.id\r\n            }\r\n        });\r\n    }\r\n\r\n    function deleteconfirm() {\r\n        setcustom(false)\r\n        dispatch(deleteucreation({id : deleteid , status : 2}))\r\n        setdeletes(1)\r\n    }\r\n    function deletecancel() {\r\n        setcustom(false)\r\n    }\r\n    function deletestatus() {\r\n\r\n        // setdatas(newda)\r\n        setdeleteid('')\r\n        setdeletesuccess(false)\r\n    }\r\n    const onCurrencyChange = newCurrency => {\r\n        setrole(newCurrency)\r\n    };\r\nlet role_data = []\r\nif(roles.length > 0){\r\n    role_data = roles.map((item, i) => {\r\n        return (<Option key={item.id} value={item.id}>{item.role}</Option>)\r\n      });\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                form={form}\r\n                initialValues={{ remember: true }}\r\n                name=\"usercreation\"\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                className=\"gx-signin-form gx-form-row0\">\r\n                <Row>\r\n                    <Col xl={8} lg={8} md={8} sm={24} xs={24}>\r\n                        <Form.Item\r\n                            rules={[{ required: true, message: 'User Name is required' }]} name=\"uname\">\r\n                            <Input value={name} onChange={(e) => {\r\n                                setname(e.target.value)\r\n                                console.log(red_data)\r\n                            }} placeholder=\"Name\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col xl={8} lg={8} md={8} sm={24} xs={24}>\r\n                        <Form.Item\r\n                            rules={[{ required: true, message: 'This field is required' }]} name=\"role\">\r\n                            <Select\r\n                                value={role}\r\n                                onChange={onCurrencyChange}\r\n                                placeholder=\"Role\"\r\n                            >\r\n                                {/* <Option value={'admin'}>{'admin'}</Option>\r\n                                <Option value={'user'}>{'user'}</Option>\r\n                                <Option value={'superadmin'}>{'superadmin'}</Option> */}\r\n                                {role_data}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col xl={8} lg={8} md={8} sm={24} xs={24}>\r\n                        <Form.Item\r\n                            rules={[{ required: true, message: 'Password is required' }]} name=\"pass\">\r\n                            <Input.Password value={pass} onChange={(e) => {\r\n                                setpass(e.target.value)\r\n                                console.log(red_data)\r\n                            }} autocomplete=\"new-password\" placeholder=\"Password\" />\r\n                        </Form.Item>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xl={8} lg={8} md={8} sm={24} xs={24}>\r\n                        <Form.Item\r\n                            rules={[{ required: true, message: 'Contact is required' }]} name=\"contact\">\r\n                            <Input value={contact} onKeyUp={(e) => {\r\n                                e.target.value = e.target.value.replace(/[^0-9]/g, '');\r\n                            }} onChange={(e) => {\r\n                                setcontact(e.target.value)\r\n                                console.log(red_data)\r\n                            }} placeholder=\"Contact\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col xl={8} lg={8} md={8} sm={24} xs={24}>\r\n                        <Form.Item name=\"email\" rules={[{\r\n                            required: true, type: 'email', message: 'The input is not valid E-mail!',\r\n                        }]} name=\"email\">\r\n                            <Input value={email} onChange={(e) => {\r\n                                setemail(e.target.value)\r\n                                console.log(red_data)\r\n                            }} placeholder=\"Email\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Col xl={4} lg={4} md={4} sm={24} xs={24}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" className=\"gx-mb-0\" htmlType=\"submit\">\r\n                            Submit\r\n              </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Form>\r\n            <Card title=\"Roles\">\r\n                <Table className=\"gx-table-responsive\" columns={columns} dataSource={data} />\r\n            </Card>\r\n            <SweetAlert show={custom}\r\n                custom\r\n                showCancel\r\n                confirmBtnText={`OK`}\r\n                cancelBtnText={`Cancel`}\r\n                confirmBtnBsStyle=\"primary\"\r\n                cancelBtnBsStyle=\"default\"\r\n                // customIcon={\"https://via.placeholder.com/500X330\"}\r\n                title={`Do you want to delete?`}\r\n                onConfirm={deleteconfirm}\r\n                onCancel={deletecancel}\r\n            >\r\n                {/* <IntlMessages id=\"sweetAlerts.youWillFind\"/> */}\r\n            </SweetAlert>\r\n            <SweetAlert show={deletesuccess} success title={`Deleted Successfully`}\r\n                onConfirm={deletestatus}>\r\n                {/* <IntlMessages id=\"sweetAlerts.btnClicked\"/> */}\r\n            </SweetAlert>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Usercreation; \r\n"],"sourceRoot":""}