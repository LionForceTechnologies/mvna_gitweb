{"version":3,"sources":["routes/role/index.js"],"names":["Role","props","roleid","useSelector","crud","role_id","ifdeleted","deleted","useState","role","setrole","edit","setedit","stop","setstop","custom","setcustom","deleteid","setdeleteid","red_data","getrole","dispatch","useDispatch","Form","useForm","form","deletesuccess","setdeletesuccess","deletes","setdeletes","Edit","e","roleedit","target","getAttribute","Delete","useEffect","setFieldsValue","data","console","log","length","map","item","i","action","style","display","marginRight","height","onClick","data-id","id","className","index","key","initialValues","remember","name","onFinish","values","putrole","updaterole","clearrole","resetFields","onFinishFailed","errorInfo","xl","lg","md","sm","xs","Item","rules","required","message","value","onChange","placeholder","type","htmlType","title","columns","dataIndex","dataSource","show","showCancel","confirmBtnText","cancelBtnText","confirmBtnBsStyle","cancelBtnBsStyle","onConfirm","roledelete","status","onCancel","success"],"mappings":"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","file":"static/js/12.563e995f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Divider, Table,Col, Row,Button, Checkbox, Form, Input, Select } from \"antd\";\r\nimport axios from 'axios';\r\nimport {  putrole,getrole,roleedit,clearrole,updaterole,roledelete,deleted } from \"../../appRedux/actions/Crud\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nconst Role = (props) => {\r\n    const roleid = useSelector(({ crud }) => crud.role_id);\r\n    const ifdeleted = useSelector(({ crud }) => crud.deleted);\r\n    const [role, setrole] = useState('');\r\n    const [edit, setedit] = useState(0);\r\n    const [stop, setstop] = useState(0);\r\n    const [custom, setcustom] = useState(false);\r\n    const [deleteid, setdeleteid] = useState(false);\r\n    const red_data = useSelector(({ crud }) => crud.getrole);\r\n    const dispatch = useDispatch();\r\n    const [form] = Form.useForm();\r\n    const [deletesuccess, setdeletesuccess] = useState(false);\r\n    const [deletes, setdeletes] = useState(0);\r\n    useEffect(() => {\r\n        if (stop === 0) {\r\n            dispatch(getrole())\r\n        }\r\n        setstop(1)\r\n    })\r\n    useEffect(()=>{\r\n      if(roleid !== ''){\r\n        if(edit !== 0){\r\n          form.setFieldsValue({\r\n            role: roleid.data[0].role\r\n          })\r\n          setrole(roleid.data[0].role)\r\n          setedit(0)\r\n        }\r\n      }\r\n    })\r\n    // useEffect(()=>{\r\n    //   if(deleteid != '' ){\r\n    //     setcustom(true)\r\n    //   }\r\n    // })\r\n    useEffect(()=>{\r\n      if(ifdeleted == 'success' ){\r\n        if(deletes != 0){\r\n          setdeletesuccess(true)\r\n          dispatch(deleted(''))\r\n          setdeletes(1)\r\n        }\r\n      }\r\n    })\r\n    function Edit(e) {\r\n        // alert(e.target.getAttribute('data-id'))\r\n        dispatch(roleedit(e.target.getAttribute('data-id')))\r\n        setedit(1)\r\n    }\r\n    function Delete(e) {\r\n      setdeleteid(e.target.getAttribute('data-id'))\r\nsetcustom(true)\r\n    }\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n      };\r\n      const onFinish = values => {\r\n        if(roleid == ''){\r\n        dispatch(putrole(\r\n          {\r\n            \"role\": role,\r\n          }\r\n        )) \r\n        }\r\n        else if(roleid != ''){\r\n          dispatch(updaterole(\r\n            {\r\n              \"role\": role,\r\n              'id': roleid.data[0].id\r\n            }\r\n          ))\r\n        setedit(0);\r\n        dispatch(clearrole(''))\r\n        \r\n        }\r\n        form.resetFields();       \r\n      };\r\n    const columns = [\r\n        {\r\n            title: 'Role Name',\r\n            dataIndex: 'role',\r\n            key: 'role',\r\n        },\r\n\r\n        { \r\n            title: 'Action',\r\n            dataIndex: 'action',\r\n            key: 'action',\r\n        }\r\n    ];\r\n    let data = [];\r\n    console.log('getroles')\r\n    console.log(red_data)\r\n    if (red_data.length > 0) {\r\n        data = red_data.map((item, i) => {\r\n            return {\r\n                role: item.role,\r\n                action: (<><div style={{ display: 'flex' }}><i style={{ marginRight: '7px', height: '15px' }} onClick={Edit} data-id={item.id} className=\"icon icon-edit\" /><i data-id={item.id} onClick={Delete} style={{ height: '15px' }} className=\"icon icon-trash\" /></div></>),\r\n                index: item.id,\r\n                key: item.id\r\n            }\r\n        });\r\n    }\r\n\r\n    function deleteconfirm() {\r\n      setcustom(false)\r\n      dispatch(roledelete({id : deleteid , status : 2}))\r\n      setdeletes(1)\r\n    }\r\n    function deletecancel() {\r\n      setcustom(false)\r\n    }\r\n    function deletestatus() {\r\n      setdeletesuccess(false)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n      <Form\r\n        form={form}\r\n        initialValues={{ remember: true }}\r\n        name=\"basic\"\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        className=\"gx-signin-form gx-form-row0\">\r\n        <Row>\r\n          <Col className={`label`} xl={3} lg={3} md={3} sm={24} xs={24}>\r\n            <p>Create Role</p>\r\n          </Col>\r\n          <Col xl={5} lg={5} md={5} sm={24} xs={24}>\r\n            <Form.Item\r\n              rules={[{ required: true, message: 'Role is required' }]} name=\"role\">\r\n              <Input value={role} onChange={(e) => {\r\n                setrole(e.target.value)\r\n                console.log(red_data)\r\n              }} placeholder=\"Role\" />\r\n            </Form.Item>\r\n          </Col>\r\n          <Col xl={4} lg={4} md={4} sm={24} xs={24}>\r\n            <Form.Item>\r\n              <Button type=\"primary\" className=\"gx-mb-0\" htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n            <Card title=\"Roles\">\r\n                <Table className=\"gx-table-responsive\" columns={columns} dataSource={data} />\r\n            </Card>\r\n            <SweetAlert show={custom}\r\n          custom\r\n          showCancel\r\n          confirmBtnText={`OK`}\r\n          cancelBtnText={`Cancel`}\r\n          confirmBtnBsStyle=\"primary\"\r\n          cancelBtnBsStyle=\"default\"\r\n          // customIcon={\"https://via.placeholder.com/500X330\"}\r\n          title={`Do you want to delete?`}\r\n          onConfirm={deleteconfirm}\r\n          onCancel={deletecancel}\r\n        >\r\n          {/* <IntlMessages id=\"sweetAlerts.youWillFind\"/> */}\r\n        </SweetAlert>\r\n        <SweetAlert show={deletesuccess} success title={`Deleted Successfully`}\r\n          onConfirm={deletestatus}>\r\n          {/* <IntlMessages id=\"sweetAlerts.btnClicked\"/> */}\r\n        </SweetAlert>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Role; \r\n"],"sourceRoot":""}